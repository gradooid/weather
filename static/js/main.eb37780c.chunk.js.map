{"version":3,"sources":["App.js","index.js"],"names":["App","state","apiKey","city","forecast","curForecast","dailyForecast","hourlyForecast","lat","lon","loading","error","e","this","setState","preventDefault","axios","get","then","res","data","list","forEach","elem","index","length","Date","dt","getDate","push","showCurWeather","showHourlyForecast","catch","err","response","date","i","navigator","geolocation","getCurrentPosition","coords","curCity","cityList","filter","Math","round","coord","latitude","longitude","sort","a","b","abs","name","getForecast","day","Container","style","display","flexDirection","alignItems","onSubmit","TextField","helperText","message","slice","toUpperCase","variant","placeholder","onChange","target","value","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","showForecast","Check","color","green","ErrorOutline","CircularProgress","size","Grid","container","item","main","temp","clouds","all","humidity","wind","speed","justify","map","key","className","Chip","getHours","label","getMinutes","wrap","Card","borderColor","cursor","flexBasis","CardContent","getDay","justifyContent","flexWrap","temp_max","temp_min","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb37780c.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  TextField,\r\n  CircularProgress,\r\n  Grid,\r\n  Chip,\r\n  Container,\r\n  Card,\r\n  CardContent,\r\n  InputAdornment,\r\n  IconButton\r\n} from '@material-ui/core';\r\nimport { Check, ErrorOutline } from '@material-ui/icons';\r\nimport { green } from '@material-ui/core/colors';\r\n\r\nimport cityList from './city.list.json';\r\n\r\nexport default class App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      apiKey: 'fc932c67434613e809c47f3c64d28601',\r\n      city: '',\r\n      forecast: [],\r\n      curForecast: {},\r\n      dailyForecast: [],\r\n      hourlyForecast: [],\r\n      lat: '',\r\n      lon: '',\r\n      loading: true,\r\n      error: null\r\n    };\r\n  }\r\n\r\n  getInitialForecast(e) {\r\n    this.setState({ loading: true });\r\n    e && e.preventDefault();\r\n\r\n    axios\r\n      .get(\r\n        `https://api.openweathermap.org/data/2.5/forecast?lat=${this.state.lat}&lon=${this.state.lon}&units=metric&appid=${this.state.apiKey}`\r\n      )\r\n      .then(res => {\r\n        let dailyForecast = [];\r\n\r\n        res.data.list.forEach((elem, index) => {\r\n          if (\r\n            index < res.data.list.length - 1 &&\r\n            new Date(elem.dt * 1000).getDate() !==\r\n              new Date(res.data.list[index + 1].dt * 1000).getDate()\r\n          ) {\r\n            dailyForecast.push(elem);\r\n          }\r\n        });\r\n\r\n        this.setState({\r\n          forecast: res.data.list,\r\n          dailyForecast: dailyForecast,\r\n          error: null\r\n        });\r\n\r\n        // Get data for today's forecast\r\n        this.showCurWeather(new Date().getDate());\r\n        this.showHourlyForecast(new Date().getDate());\r\n      })\r\n      .catch(err =>\r\n        this.setState({\r\n          error: err.response.data,\r\n          loading: false\r\n        })\r\n      );\r\n  }\r\n\r\n  getForecast(e) {\r\n    this.setState({ loading: true });\r\n    e && e.preventDefault();\r\n\r\n    axios\r\n      .get(\r\n        `https://api.openweathermap.org/data/2.5/forecast?q=${this.state.city}&units=metric&appid=${this.state.apiKey}`\r\n      )\r\n      .then(res => {\r\n        let dailyForecast = [];\r\n\r\n        res.data.list.forEach((elem, index) => {\r\n          if (\r\n            index < res.data.list.length - 1 &&\r\n            new Date(elem.dt * 1000).getDate() !==\r\n              new Date(res.data.list[index + 1].dt * 1000).getDate()\r\n          ) {\r\n            dailyForecast.push(elem);\r\n          }\r\n        });\r\n\r\n        this.setState({\r\n          forecast: res.data.list,\r\n          dailyForecast: dailyForecast,\r\n          error: null\r\n        });\r\n\r\n        // Get data for today's forecast\r\n        this.showCurWeather(new Date().getDate());\r\n        this.showHourlyForecast(new Date().getDate());\r\n      })\r\n      .catch(err =>\r\n        this.setState({\r\n          error: err.response.data,\r\n          loading: false\r\n        })\r\n      );\r\n  }\r\n\r\n  showCurWeather(date) {\r\n    let curForecast;\r\n\r\n    // Get forecast for selected date\r\n    for (let i = 0; i < this.state.forecast.length; i++) {\r\n      if (new Date(this.state.forecast[i].dt * 1000).getDate() === date) {\r\n        curForecast = this.state.forecast[i];\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.setState({ curForecast: curForecast, error: null });\r\n    this.showHourlyForecast(date);\r\n  }\r\n\r\n  showHourlyForecast(date) {\r\n    let hourlyForecast = [];\r\n\r\n    this.state.forecast.forEach(elem => {\r\n      if (new Date(elem.dt * 1000).getDate() === date) {\r\n        hourlyForecast.push(elem);\r\n      }\r\n    });\r\n\r\n    this.setState({\r\n      hourlyForecast: hourlyForecast,\r\n      loading: false,\r\n      error: null\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    if ('geolocation' in navigator) {\r\n      navigator.geolocation.getCurrentPosition(({ coords }) => {\r\n        const curCity = cityList\r\n          .filter(\r\n            city =>\r\n              Math.round(city.coord.lat) === Math.round(coords.latitude) &&\r\n              Math.round(city.coord.lon) === Math.round(coords.longitude)\r\n          )\r\n          .sort((a, b) => {\r\n            const lat_a = Math.abs(a.coord.lat - coords.latitude);\r\n            const lon_a = Math.abs(a.coord.lon - coords.longitude);\r\n            const lat_b = Math.abs(b.coord.lat - coords.latitude);\r\n            const lon_b = Math.abs(b.coord.lon - coords.longitude);\r\n            return lat_a + lon_a - (lat_b + lon_b);\r\n          });\r\n        this.setState({\r\n          city: curCity[0].name\r\n        });\r\n        this.getForecast();\r\n      });\r\n    } else {\r\n      this.getForecast();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const day = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\n    return (\r\n      <Container\r\n        style={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center'\r\n        }}\r\n      >\r\n        <form onSubmit={e => this.getForecast(e)}>\r\n          <TextField\r\n            error={this.state.error !== null}\r\n            helperText={\r\n              this.state.error !== null &&\r\n              this.state.error.message.slice(0, 1).toUpperCase() +\r\n                this.state.error.message.slice(1)\r\n            }\r\n            variant=\"outlined\"\r\n            placeholder=\"Search for your city\"\r\n            onChange={e => this.setState({ city: e.target.value })}\r\n            value={this.state.city}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton onClick={e => this.showForecast(e)}>\r\n                    {!this.state.error && !this.state.loading && (\r\n                      <Check style={{ color: green[500] }} />\r\n                    )}\r\n                    {this.state.error && !this.state.loading && (\r\n                      <ErrorOutline color=\"error\" />\r\n                    )}\r\n                    {this.state.loading && <CircularProgress size=\"1em\" />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n          />\r\n        </form>\r\n        <br />\r\n\r\n        {!this.state.loading && this.state.error === null && (\r\n          <div>\r\n            <Grid container>\r\n              <Grid item>\r\n                <h1>{Math.round(this.state.curForecast.main.temp)} °C</h1>\r\n                <div>\r\n                  <p>Cloudiness: {this.state.curForecast.clouds.all}%</p>\r\n                  <p>Humidity: {this.state.curForecast.main.humidity}%</p>\r\n                  <p>\r\n                    Wind speed:{' '}\r\n                    {Math.round(this.state.curForecast.wind.speed) * 3.6}\r\n                    km/h\r\n                  </p>\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n            <br />\r\n            <Grid container justify=\"flex-start\">\r\n              {this.state.hourlyForecast.map((elem, index) => (\r\n                <Grid item key={index}>\r\n                  <p className=\"temp-secondary\">{Math.round(elem.main.temp)}</p>\r\n                  <Chip\r\n                    color={\r\n                      new Date(elem.dt * 1000).getHours() ===\r\n                      new Date(this.state.curForecast.dt * 1000).getHours()\r\n                        ? 'primary'\r\n                        : 'default'\r\n                    }\r\n                    onClick={() => this.setState({ curForecast: elem })}\r\n                    label={`${\r\n                      new Date(elem.dt * 1000).getHours() < 10\r\n                        ? '0' + new Date(elem.dt * 1000).getHours()\r\n                        : new Date(elem.dt * 1000).getHours()\r\n                    }:${\r\n                      new Date(elem.dt * 1000).getMinutes() < 10\r\n                        ? '0' + new Date(elem.dt * 1000).getMinutes()\r\n                        : new Date(elem.dt * 1000).getMinutes()\r\n                    }`}\r\n                  />\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n            <br />\r\n            <Grid container wrap=\"nowrap\">\r\n              {this.state.dailyForecast.map((elem, index) => (\r\n                <Card\r\n                  key={index}\r\n                  variant=\"outlined\"\r\n                  style={{\r\n                    borderColor:\r\n                      new Date(elem.dt * 1000).getDate() ===\r\n                      new Date(this.state.curForecast.dt * 1000).getDate()\r\n                        ? '#1976d2'\r\n                        : 'rgba(0, 0, 0, 0.12)',\r\n                    cursor: 'pointer',\r\n                    display: 'flex',\r\n                    flexBasis: 'content'\r\n                  }}\r\n                  onClick={() =>\r\n                    this.showCurWeather(new Date(elem.dt * 1000).getDate())\r\n                  }\r\n                >\r\n                  <CardContent>\r\n                    <p>{day[new Date(elem.dt * 1000).getDay()]}</p>\r\n                    <p\r\n                      style={{\r\n                        display: 'flex',\r\n                        justifyContent: 'start',\r\n                        flexWrap: 'nowrap'\r\n                      }}\r\n                    >\r\n                      <span>{Math.round(elem.main.temp_max)}° </span>\r\n                      <span style={{ color: '#777' }}>\r\n                        {Math.round(elem.main.temp_min)}°\r\n                      </span>\r\n                    </p>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </Grid>\r\n          </div>\r\n        )}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}